#!/usr/bin/env node

/**
 * üß™ Test de Sistema de Recuperaci√≥n de Navegaci√≥n - Tenerife Paradise Tours
 * 
 * Este script simula problemas de navegaci√≥n para probar el sistema de recuperaci√≥n.
 */

const fs = require('fs');
const path = require('path');

console.log('üß™ TEST DE SISTEMA DE RECUPERACI√ìN DE NAVEGACI√ìN');
console.log('================================================\n');

// Verificar archivos cr√≠ticos
console.log('üîç Verificando archivos cr√≠ticos...');
const criticalFiles = [
  'hooks/use-navigation-recovery.ts',
  'components/navigation-recovery.tsx',
  'app/layout.tsx'
];

criticalFiles.forEach(file => {
  const filePath = path.join(process.cwd(), file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file} presente`);
  } else {
    console.log(`‚ùå ${file} faltante`);
  }
});

// Verificar integraci√≥n en layout
console.log('\nüîç Verificando integraci√≥n en layout...');
const layoutPath = path.join(process.cwd(), 'app/layout.tsx');
if (fs.existsSync(layoutPath)) {
  const layoutContent = fs.readFileSync(layoutPath, 'utf8');
  
  const checks = [
    {
      name: 'NavigationRecovery importado',
      check: layoutContent.includes('NavigationRecovery')
    },
    {
      name: 'ProblemDetector importado',
      check: layoutContent.includes('ProblemDetector')
    },
    {
      name: 'NavigationRecovery component',
      check: layoutContent.includes('NavigationRecovery')
    },
    {
      name: 'SuppressHydrationWarning',
      check: layoutContent.includes('SuppressHydrationWarning')
    }
  ];

  checks.forEach(({ name, check }) => {
    console.log(`${check ? '‚úÖ' : '‚ùå'} ${name}`);
  });
} else {
  console.log('‚ùå Layout no encontrado');
}

// Verificar configuraci√≥n del hook
console.log('\nüîç Verificando configuraci√≥n del hook...');
const hookPath = path.join(process.cwd(), 'hooks/use-navigation-recovery.ts');
if (fs.existsSync(hookPath)) {
  const hookContent = fs.readFileSync(hookPath, 'utf8');
  
  const hookChecks = [
    {
      name: 'Detector de errores de navegaci√≥n',
      check: hookContent.includes('navigation') && hookContent.includes('routing')
    },
    {
      name: 'Limpieza de cach√© del cliente',
      check: hookContent.includes('localStorage.clear()') && hookContent.includes('sessionStorage.clear()')
    },
    {
      name: 'Recuperaci√≥n autom√°tica',
      check: hookContent.includes('recoverFromError')
    },
    {
      name: 'Control de reintentos',
      check: hookContent.includes('maxRetries') && hookContent.includes('retryCount')
    }
  ];

  hookChecks.forEach(({ name, check }) => {
    console.log(`${check ? '‚úÖ' : '‚ùå'} ${name}`);
  });
} else {
  console.log('‚ùå Hook no encontrado');
}

// Verificar componente de recuperaci√≥n
console.log('\nüîç Verificando componente de recuperaci√≥n...');
const componentPath = path.join(process.cwd(), 'components/navigation-recovery.tsx');
if (fs.existsSync(componentPath)) {
  const componentContent = fs.readFileSync(componentPath, 'utf8');
  
  const componentChecks = [
    {
      name: 'Detecci√≥n de problemas',
      check: componentContent.includes('checkForProblems')
    },
    {
      name: 'Bot√≥n de recuperaci√≥n autom√°tica',
      check: componentContent.includes('manualRecover')
    },
    {
      name: 'Bot√≥n de limpiar cach√©',
      check: componentContent.includes('manualClearCache')
    },
    {
      name: 'ProblemDetector',
      check: componentContent.includes('ProblemDetector')
    }
  ];

  componentChecks.forEach(({ name, check }) => {
    console.log(`${check ? '‚úÖ' : '‚ùå'} ${name}`);
  });
} else {
  console.log('‚ùå Componente no encontrado');
}

console.log('\nüéØ ESCENARIOS DE PRUEBA:');
console.log('========================');
console.log('1. Navegar a una URL err√≥nea (ej: /pagina-que-no-existe)');
console.log('2. Volver atr√°s con el bot√≥n del navegador');
console.log('3. Verificar que aparece el panel de recuperaci√≥n');
console.log('4. Probar el bot√≥n "Recuperar autom√°ticamente"');
console.log('5. Probar el bot√≥n "Limpiar cach√©"');
console.log('6. Verificar que los datos cargan correctamente despu√©s');

console.log('\nüí° FUNCIONALIDADES IMPLEMENTADAS:');
console.log('==================================');
console.log('‚Ä¢ Detecci√≥n autom√°tica de errores de navegaci√≥n');
console.log('‚Ä¢ Limpieza autom√°tica de cach√© del cliente');
console.log('‚Ä¢ Recuperaci√≥n autom√°tica con reintentos');
console.log('‚Ä¢ Panel de recuperaci√≥n manual');
console.log('‚Ä¢ Detector de problemas en tiempo real');
console.log('‚Ä¢ Integraci√≥n con el sistema de hidrataci√≥n');

console.log('\nüîß COMANDOS PARA PROBAR:');
console.log('=======================');
console.log('‚Ä¢ npm run dev - Iniciar servidor de desarrollo');
console.log('‚Ä¢ Navegar a URL err√≥nea para activar recuperaci√≥n');
console.log('‚Ä¢ Verificar consola del navegador para logs');
console.log('‚Ä¢ Probar botones de recuperaci√≥n manual');

console.log('\n‚úÖ Test de sistema de recuperaci√≥n completado'); 