#!/usr/bin/env node

/**
 * üß™ Test de Recuperaci√≥n de Errores - Tenerife Paradise Tours
 * 
 * Este script simula diferentes escenarios de error para probar
 * el sistema de recuperaci√≥n autom√°tica implementado.
 */

const { createClient } = require('@supabase/supabase-js')

console.log('üß™ TEST DE RECUPERACI√ìN DE ERRORES')
console.log('===================================\n')

// Configuraci√≥n
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables de entorno no configuradas')
  console.log('Aseg√∫rate de tener NEXT_PUBLIC_SUPABASE_URL y NEXT_PUBLIC_SUPABASE_ANON_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

// Funci√≥n de retry con delay exponencial
const retryWithDelay = async (operation, retryCount = 0) => {
  const MAX_RETRIES = 3
  const RETRY_DELAY = 2000

  try {
    return await operation()
  } catch (error) {
    if (retryCount < MAX_RETRIES) {
      console.log(`üîÑ Reintento ${retryCount + 1}/${MAX_RETRIES} en ${RETRY_DELAY * Math.pow(2, retryCount)}ms`)
      await new Promise(resolve => 
        setTimeout(resolve, RETRY_DELAY * Math.pow(2, retryCount))
      )
      return retryWithDelay(operation, retryCount + 1)
    }
    throw error
  }
}

// Test 1: Conexi√≥n b√°sica
async function testBasicConnection() {
  console.log('üì° Test 1: Conexi√≥n b√°sica a Supabase')
  try {
    const { data, error } = await supabase.from('profiles').select('count').limit(1)
    
    if (error) {
      throw error
    }
    
    console.log('‚úÖ Conexi√≥n exitosa')
    return true
  } catch (error) {
    console.error('‚ùå Error de conexi√≥n:', error.message)
    return false
  }
}

// Test 2: Carga de servicios con retry
async function testServicesLoad() {
  console.log('\nüì¶ Test 2: Carga de servicios con sistema de retry')
  
  try {
    const { data, error } = await retryWithDelay(async () => {
      const result = await supabase
        .from('services')
        .select(`
          *,
          category:categories(name, description),
          subcategory:subcategories(name, description)
        `)
        .order('created_at', { ascending: false })
      
      if (result.error) {
        throw new Error(`Error obteniendo servicios: ${result.error.message}`)
      }
      
      return result
    })

    console.log(`‚úÖ ${data?.length || 0} servicios cargados exitosamente`)
    return true
  } catch (error) {
    console.error('‚ùå Error cargando servicios:', error.message)
    return false
  }
}

// Test 3: Simular error de red
async function testNetworkError() {
  console.log('\nüåê Test 3: Simulaci√≥n de error de red')
  
  try {
    // Intentar una operaci√≥n que probablemente falle
    const { data, error } = await retryWithDelay(async () => {
      const result = await supabase
        .from('table_that_does_not_exist')
        .select('*')
      
      if (result.error) {
        throw new Error(`Error simulado: ${result.error.message}`)
      }
      
      return result
    })

    console.log('‚úÖ Operaci√≥n inesperadamente exitosa')
    return true
  } catch (error) {
    console.log('‚úÖ Error simulado capturado correctamente:', error.message)
    return true // Este error es esperado
  }
}

// Test 4: Carga de categor√≠as
async function testCategoriesLoad() {
  console.log('\nüìÇ Test 4: Carga de categor√≠as')
  
  try {
    const { data, error } = await retryWithDelay(async () => {
      const result = await supabase
        .from('categories')
        .select('*')
        .order('name')
      
      if (result.error) {
        throw new Error(`Error obteniendo categor√≠as: ${result.error.message}`)
      }
      
      return result
    })

    console.log(`‚úÖ ${data?.length || 0} categor√≠as cargadas exitosamente`)
    return true
  } catch (error) {
    console.error('‚ùå Error cargando categor√≠as:', error.message)
    return false
  }
}

// Test 5: Simular m√∫ltiples operaciones simult√°neas
async function testConcurrentOperations() {
  console.log('\n‚ö° Test 5: Operaciones simult√°neas')
  
  try {
    const promises = [
      supabase.from('services').select('count').limit(1),
      supabase.from('categories').select('count').limit(1),
      supabase.from('subcategories').select('count').limit(1)
    ]
    
    const results = await Promise.all(promises)
    
    let successCount = 0
    results.forEach((result, index) => {
      if (!result.error) {
        successCount++
      }
    })
    
    console.log(`‚úÖ ${successCount}/${results.length} operaciones simult√°neas exitosas`)
    return successCount === results.length
  } catch (error) {
    console.error('‚ùå Error en operaciones simult√°neas:', error.message)
    return false
  }
}

// Test 6: Recuperaci√≥n despu√©s de error
async function testErrorRecovery() {
  console.log('\nüîÑ Test 6: Recuperaci√≥n despu√©s de error')
  
  try {
    // Primero, intentar una operaci√≥n que falle
    try {
      await supabase.from('table_that_does_not_exist').select('*')
    } catch (error) {
      console.log('‚úÖ Error simulado capturado')
    }
    
    // Luego, intentar una operaci√≥n v√°lida
    const { data, error } = await retryWithDelay(async () => {
      const result = await supabase
        .from('services')
        .select('id, title')
        .limit(1)
      
      if (result.error) {
        throw new Error(`Error obteniendo servicios: ${result.error.message}`)
      }
      
      return result
    })

    console.log('‚úÖ Recuperaci√≥n exitosa despu√©s de error')
    return true
  } catch (error) {
    console.error('‚ùå Error en recuperaci√≥n:', error.message)
    return false
  }
}

// Funci√≥n principal
async function runTests() {
  console.log('üöÄ Iniciando tests de recuperaci√≥n de errores...\n')
  
  const tests = [
    { name: 'Conexi√≥n b√°sica', fn: testBasicConnection },
    { name: 'Carga de servicios', fn: testServicesLoad },
    { name: 'Error de red simulado', fn: testNetworkError },
    { name: 'Carga de categor√≠as', fn: testCategoriesLoad },
    { name: 'Operaciones simult√°neas', fn: testConcurrentOperations },
    { name: 'Recuperaci√≥n de errores', fn: testErrorRecovery }
  ]
  
  let passedTests = 0
  const totalTests = tests.length
  
  for (const test of tests) {
    try {
      const result = await test.fn()
      if (result) {
        passedTests++
      }
    } catch (error) {
      console.error(`‚ùå Error en test "${test.name}":`, error.message)
    }
  }
  
  console.log('\nüìä RESULTADOS DE LOS TESTS')
  console.log('==========================')
  console.log(`‚úÖ Tests pasados: ${passedTests}/${totalTests}`)
  console.log(`‚ùå Tests fallidos: ${totalTests - passedTests}/${totalTests}`)
  
  if (passedTests === totalTests) {
    console.log('\nüéâ ¬°Todos los tests pasaron! El sistema de recuperaci√≥n funciona correctamente.')
  } else {
    console.log('\n‚ö†Ô∏è Algunos tests fallaron. Revisa los errores arriba.')
  }
  
  console.log('\nüí° RECOMENDACIONES:')
  console.log('1. Verifica que la base de datos est√© accesible')
  console.log('2. Confirma que las variables de entorno est√©n configuradas')
  console.log('3. Revisa los logs de Supabase para errores espec√≠ficos')
  console.log('4. Prueba la aplicaci√≥n en el navegador para verificar el comportamiento')
}

// Ejecutar tests
runTests().catch(error => {
  console.error('‚ùå Error ejecutando tests:', error)
  process.exit(1)
}) 