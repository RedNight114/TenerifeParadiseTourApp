#!/usr/bin/env node

/**
 * üîß Fix de Hidrataci√≥n - Tenerife Paradise Tours
 * 
 * Este script limpia el cach√© y reinicia el servidor para solucionar
 * problemas de hidrataci√≥n de React.
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîß FIX DE HIDRATACI√ìN');
console.log('=====================\n');

// 1. Limpiar cach√© de Next.js
console.log('üì¶ Limpiando cach√© de Next.js...');
try {
  execSync('npx next clean', { stdio: 'inherit' });
  console.log('‚úÖ Cach√© de Next.js limpiado');
} catch (error) {
  console.log('‚ö†Ô∏è Error limpiando cach√© de Next.js:', error.message);
}

// 2. Limpiar archivos temporales
console.log('\nüóÇÔ∏è Limpiando archivos temporales...');
const tempDirs = ['.next', '.vercel', 'out', 'node_modules/.cache'];
tempDirs.forEach(dir => {
  const dirPath = path.join(process.cwd(), dir);
  if (fs.existsSync(dirPath)) {
    try {
      fs.rmSync(dirPath, { recursive: true, force: true });
      console.log(`‚úÖ ${dir} eliminado`);
    } catch (error) {
      console.log(`‚ö†Ô∏è Error eliminando ${dir}:`, error.message);
    }
  }
});

// 3. Limpiar logs
console.log('\nüìù Limpiando logs...');
const logFiles = ['npm-debug.log', 'yarn-error.log', 'pnpm-debug.log'];
logFiles.forEach(logFile => {
  const logPath = path.join(process.cwd(), logFile);
  if (fs.existsSync(logPath)) {
    try {
      fs.unlinkSync(logPath);
      console.log(`‚úÖ ${logFile} eliminado`);
    } catch (error) {
      console.log(`‚ö†Ô∏è Error eliminando ${logFile}:`, error.message);
    }
  }
});

// 4. Verificar archivos cr√≠ticos
console.log('\nüîç Verificando archivos cr√≠ticos...');
const criticalFiles = [
  'components/hydration-safe.tsx',
  'components/featured-services.tsx',
  'app/(main)/page.tsx'
];

criticalFiles.forEach(file => {
  const filePath = path.join(process.cwd(), file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file} presente`);
  } else {
    console.log(`‚ùå ${file} faltante`);
  }
});

// 5. Verificar variables de entorno
console.log('\nüåç Verificando variables de entorno...');
const envFile = path.join(process.cwd(), '.env.local');
if (fs.existsSync(envFile)) {
  console.log('‚úÖ .env.local presente');
} else {
  console.log('‚ö†Ô∏è .env.local no encontrado');
}

console.log('\nüéØ RECOMENDACIONES POST-FIX:');
console.log('============================');
console.log('1. Reiniciar el servidor: npm run dev');
console.log('2. Limpiar cach√© del navegador (Ctrl+Shift+Delete)');
console.log('3. Probar en ventana de inc√≥gnito');
console.log('4. Verificar que no hay errores de hidrataci√≥n');
console.log('5. Comprobar que los iconos SVG se renderizan correctamente');

console.log('\nüí° SOLUCIONES ADICIONALES:');
console.log('==========================');
console.log('‚Ä¢ Si persisten los errores, verificar que todos los componentes usen ClientOnly');
console.log('‚Ä¢ Asegurar que los iconos SVG no se rendericen en el servidor');
console.log('‚Ä¢ Verificar que los hooks de estado solo se usen en componentes cliente');
console.log('‚Ä¢ Comprobar que no hay diferencias entre SSR y CSR');

console.log('\n‚úÖ Fix de hidrataci√≥n completado'); 