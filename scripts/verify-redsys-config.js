#!/usr/bin/env node

/**
 * Script para verificar la configuraci√≥n de Redsys
 * Detecta problemas espec√≠ficos en la configuraci√≥n del comercio
 */

const crypto = require('crypto')

// Configuraci√≥n actual de Redsys
const config = {
  merchantCode: '367529286',
  terminal: '1',
  secretKey: 'sq7HjrUOBfKmC576ILgskD5srU870gJ7', // Clave de prueba
  environment: 'https://sis-t.redsys.es:25443/sis/realizarPago'
}

function verifyRedsysConfig() {
  console.log('üîç VERIFICACI√ìN DE CONFIGURACI√ìN REDSYS')
  console.log('======================================')

  try {
    // 1. Verificar formato de la clave secreta
    console.log('\n1Ô∏è‚É£ Verificaci√≥n de la clave secreta:')
    
    let isKeyValid = false
    let decodedKey = null
    
    try {
      decodedKey = Buffer.from(config.secretKey, "base64")
      isKeyValid = decodedKey.length > 0
      console.log(`   Clave original: ${config.secretKey}`)
      console.log(`   Longitud decodificada: ${decodedKey.length} bytes`)
      console.log(`   Clave v√°lida: ${isKeyValid}`)
    } catch (error) {
      console.log(`   ‚ùå Error decodificando clave: ${error.message}`)
      console.log(`   La clave debe estar en formato base64 v√°lido`)
    }

    // 2. Verificar par√°metros de prueba
    console.log('\n2Ô∏è‚É£ Par√°metros de prueba:')
    
    const testData = {
      amount: 100, // 1‚Ç¨ para prueba
      orderNumber: 'TEST123456',
      description: 'Prueba de configuraci√≥n'
    }
    
    const merchantParameters = {
      DS_MERCHANT_AMOUNT: (testData.amount * 100).toString().padStart(12, '0'),
      DS_MERCHANT_ORDER: testData.orderNumber,
      DS_MERCHANT_MERCHANTCODE: config.merchantCode,
      DS_MERCHANT_CURRENCY: "978",
      DS_MERCHANT_TRANSACTIONTYPE: "1",
      DS_MERCHANT_TERMINAL: config.terminal,
      DS_MERCHANT_MERCHANTURL: "https://tenerifeparadisetoursexcursions.com/api/payment/webhook",
      DS_MERCHANT_URLOK: "https://tenerifeparadisetoursexcursions.com/payment/success",
      DS_MERCHANT_URLKO: "https://tenerifeparadisetoursexcursions.com/payment/error",
      DS_MERCHANT_PRODUCTDESCRIPTION: testData.description,
      DS_MERCHANT_MERCHANTNAME: "Tenerife Paradise Tours",
      DS_MERCHANT_CONSUMERLANGUAGE: "001",
      DS_MERCHANT_MERCHANTDATA: "test-data",
    }
    
    console.log('   Par√°metros generados:')
    console.log(JSON.stringify(merchantParameters, null, 2))

    // 3. Verificar codificaci√≥n de par√°metros
    console.log('\n3Ô∏è‚É£ Verificaci√≥n de codificaci√≥n:')
    
    const merchantParametersJson = JSON.stringify(merchantParameters)
    const merchantParametersBase64 = Buffer.from(merchantParametersJson, 'utf8').toString('base64')
    
    console.log(`   JSON length: ${merchantParametersJson.length}`)
    console.log(`   Base64 length: ${merchantParametersBase64.length}`)
    console.log(`   Base64 v√°lido: ${merchantParametersBase64.length > 0}`)

    // 4. Verificar generaci√≥n de firma
    console.log('\n4Ô∏è‚É£ Verificaci√≥n de firma:')
    
    if (!isKeyValid) {
      console.log('   ‚ùå No se puede generar firma con clave inv√°lida')
      return false
    }
    
    const hmac = crypto.createHmac("sha256", decodedKey)
    hmac.update(testData.orderNumber + merchantParametersBase64)
    const signature = hmac.digest("base64")
    
    console.log(`   Firma generada: ${signature}`)
    console.log(`   Longitud de firma: ${signature.length}`)
    console.log(`   Firma v√°lida: ${signature.length > 0}`)

    // 5. Verificar decodificaci√≥n
    console.log('\n5Ô∏è‚É£ Verificaci√≥n de decodificaci√≥n:')
    
    try {
      const decodedJson = Buffer.from(merchantParametersBase64, 'base64').toString('utf8')
      const decodedParams = JSON.parse(decodedJson)
      
      console.log('   ‚úÖ Decodificaci√≥n exitosa')
      console.log(`   Importe decodificado: ${decodedParams.DS_MERCHANT_AMOUNT}`)
      console.log(`   Pedido decodificado: ${decodedParams.DS_MERCHANT_ORDER}`)
      
      const isDecodedValid = decodedParams.DS_MERCHANT_AMOUNT === merchantParameters.DS_MERCHANT_AMOUNT &&
                            decodedParams.DS_MERCHANT_ORDER === merchantParameters.DS_MERCHANT_ORDER
      
      console.log(`   Par√°metros coinciden: ${isDecodedValid}`)
      
      if (!isDecodedValid) {
        console.log('   ‚ùå Error en la codificaci√≥n/decodificaci√≥n')
        return false
      }
    } catch (error) {
      console.log(`   ‚ùå Error al decodificar: ${error.message}`)
      return false
    }

    // 6. An√°lisis de posibles problemas
    console.log('\n6Ô∏è‚É£ An√°lisis de problemas comunes:')
    
    const problems = []
    
    // Verificar longitud del n√∫mero de pedido
    if (testData.orderNumber.length > 12) {
      problems.push('N√∫mero de pedido demasiado largo (>12 caracteres)')
    }
    
    // Verificar formato del importe
    if (merchantParameters.DS_MERCHANT_AMOUNT.length !== 12) {
      problems.push('Importe no tiene 12 posiciones')
    }
    
    // Verificar que el importe no sea 0
    if (merchantParameters.DS_MERCHANT_AMOUNT === '000000000000') {
      problems.push('Importe es 0')
    }
    
    // Verificar c√≥digo de comercio
    if (config.merchantCode.length > 9) {
      problems.push('C√≥digo de comercio demasiado largo (>9 caracteres)')
    }
    
    // Verificar terminal
    if (config.terminal.length > 3) {
      problems.push('Terminal demasiado largo (>3 caracteres)')
    }
    
    if (problems.length > 0) {
      console.log('   ‚ùå Problemas detectados:')
      problems.forEach(problem => console.log(`      - ${problem}`))
    } else {
      console.log('   ‚úÖ No se detectaron problemas en los par√°metros')
    }

    // 7. Verificar configuraci√≥n espec√≠fica
    console.log('\n7Ô∏è‚É£ Verificaci√≥n de configuraci√≥n espec√≠fica:')
    
    console.log('   C√≥digo de comercio:', config.merchantCode)
    console.log('   Terminal:', config.terminal)
    console.log('   Entorno:', config.environment)
    console.log('   Tipo de transacci√≥n: 1 (Preautorizaci√≥n)')
    console.log('   Moneda: 978 (EUR)')
    console.log('   Idioma: 001 (Espa√±ol)')

    // 8. Recomendaciones espec√≠ficas
    console.log('\n8Ô∏è‚É£ Recomendaciones para SIS0042:')
    
    console.log('   üîç Verificar en el panel de Redsys:')
    console.log('      1. Que el c√≥digo de comercio est√© activo')
    console.log('      2. Que el terminal est√© configurado correctamente')
    console.log('      3. Que la clave secreta sea la correcta')
    console.log('      4. Que las URLs de notificaci√≥n est√©n permitidas')
    console.log('      5. Que el tipo de transacci√≥n est√© habilitado')
    
    console.log('\n   üîß Posibles soluciones:')
    console.log('      1. Contactar con Redsys para verificar la configuraci√≥n')
    console.log('      2. Solicitar nueva clave secreta si es necesario')
    console.log('      3. Verificar que el comercio est√© en modo de pruebas')
    console.log('      4. Confirmar que las URLs est√©n en la lista blanca')

    // 9. Resumen final
    console.log('\nüìä RESUMEN FINAL')
    console.log('================')
    
    const allValid = isKeyValid && problems.length === 0
    
    if (allValid) {
      console.log('‚úÖ Configuraci√≥n b√°sica correcta')
      console.log('‚úÖ Los par√°metros se generan correctamente')
      console.log('‚úÖ La firma se calcula correctamente')
      console.log('‚ö†Ô∏è  El problema est√° en la configuraci√≥n del comercio en Redsys')
    } else {
      console.log('‚ùå Hay problemas en la configuraci√≥n local')
      console.log('‚ùå Se deben corregir antes de contactar con Redsys')
    }

    return allValid

  } catch (error) {
    console.error('‚ùå Error en la verificaci√≥n:', error.message)
    return false
  }
}

// Ejecutar la verificaci√≥n
const isValid = verifyRedsysConfig()

console.log('\nüéØ PR√ìXIMOS PASOS')
console.log('==================')

if (isValid) {
  console.log('1. Contactar con Redsys para verificar la configuraci√≥n del comercio')
  console.log('2. Solicitar verificaci√≥n de la clave secreta')
  console.log('3. Confirmar que el comercio est√© en modo de pruebas')
  console.log('4. Verificar que las URLs est√©n permitidas')
} else {
  console.log('1. Corregir los problemas de configuraci√≥n local')
  console.log('2. Verificar la clave secreta')
  console.log('3. Ajustar los par√°metros seg√∫n las especificaciones')
  console.log('4. Volver a probar despu√©s de las correcciones')
}

console.log('\n‚úÖ Verificaci√≥n completada') 