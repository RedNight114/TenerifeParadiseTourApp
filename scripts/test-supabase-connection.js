#!/usr/bin/env node

/**
 * üß™ Prueba de Conexi√≥n a Supabase
 * 
 * Este script prueba la conexi√≥n a Supabase y verifica que los datos se cargan correctamente.
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

async function testSupabaseConnection() {
  console.log('üß™ PROBANDO CONEXI√ìN A SUPABASE');
  console.log('===============================\n');

  // Verificar variables de entorno
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseKey) {
    console.log('‚ùå Variables de entorno faltantes');
    console.log('   NEXT_PUBLIC_SUPABASE_URL:', !!supabaseUrl);
    console.log('   NEXT_PUBLIC_SUPABASE_ANON_KEY:', !!supabaseKey);
    return;
  }

  console.log('‚úÖ Variables de entorno configuradas');

  try {
    // Crear cliente
    const supabase = createClient(supabaseUrl, supabaseKey);
    console.log('‚úÖ Cliente Supabase creado');

    // Probar conexi√≥n b√°sica
    console.log('\nüîç Probando conexi√≥n b√°sica...');
    const { data: testData, error: testError } = await supabase
      .from('profiles')
      .select('id')
      .limit(1);

    if (testError) {
      console.log('‚ùå Error de conexi√≥n:', testError.message);
      return;
    }

    console.log('‚úÖ Conexi√≥n b√°sica exitosa');

    // Probar carga de servicios
    console.log('\nüîç Probando carga de servicios...');
    const { data: services, error: servicesError } = await supabase
      .from('services')
      .select('id, title')
      .limit(5);

    if (servicesError) {
      console.log('‚ùå Error cargando servicios:', servicesError.message);
    } else {
      console.log('‚úÖ Servicios cargados:', services?.length || 0, 'servicios');
    }

    // Probar carga de categor√≠as
    console.log('\nüîç Probando carga de categor√≠as...');
    const { data: categories, error: categoriesError } = await supabase
      .from('categories')
      .select('id, name')
      .limit(5);

    if (categoriesError) {
      console.log('‚ùå Error cargando categor√≠as:', categoriesError.message);
    } else {
      console.log('‚úÖ Categor√≠as cargadas:', categories?.length || 0, 'categor√≠as');
    }

    // Probar autenticaci√≥n an√≥nima
    console.log('\nüîç Probando autenticaci√≥n an√≥nima...');
    const { data: { session }, error: authError } = await supabase.auth.getSession();

    if (authError) {
      console.log('‚ùå Error de autenticaci√≥n:', authError.message);
    } else {
      console.log('‚úÖ Autenticaci√≥n funcionando');
      console.log('   Sesi√≥n activa:', !!session);
    }

  } catch (error) {
    console.log('‚ùå Error general:', error.message);
  }
}

testSupabaseConnection();
