#!/usr/bin/env node

/**
 * üîç Diagn√≥stico de Rendimiento - Tenerife Paradise Tours
 * 
 * Este script analiza los problemas de rendimiento comunes:
 * - Cach√© del lado del cliente
 * - Re-renders innecesarios
 * - Problemas de navegaci√≥n
 * - Memory leaks
 * - Optimizaciones de Next.js
 */

const fs = require('fs');
const path = require('path');

console.log('üîç DIAGN√ìSTICO DE RENDIMIENTO');
console.log('==============================\n');

// 1. Verificar configuraci√≥n de Next.js
console.log('üìã 1. CONFIGURACI√ìN DE NEXT.JS');
console.log('--------------------------------');

const nextConfigPath = path.join(process.cwd(), 'next.config.mjs');
if (fs.existsSync(nextConfigPath)) {
  const nextConfig = fs.readFileSync(nextConfigPath, 'utf8');
  
  // Verificar optimizaciones cr√≠ticas
  const checks = [
    { name: 'SWC Minify', pattern: /swcMinify:\s*true/, critical: true },
    { name: 'React Strict Mode', pattern: /reactStrictMode:\s*true/, critical: true },
    { name: 'Image Optimization', pattern: /formats:\s*\[.*webp.*avif.*\]/, critical: false },
    { name: 'Webpack Optimizations', pattern: /splitChunks/, critical: false },
    { name: 'Console Removal', pattern: /removeConsole.*production/, critical: false },
  ];

  checks.forEach(check => {
    const found = check.pattern.test(nextConfig);
    const status = found ? '‚úÖ' : check.critical ? '‚ùå' : '‚ö†Ô∏è';
    console.log(`${status} ${check.name}: ${found ? 'Configurado' : 'No configurado'}`);
  });
} else {
  console.log('‚ùå next.config.mjs no encontrado');
}

// 2. Verificar hooks de autenticaci√≥n
console.log('\nüîê 2. HOOKS DE AUTENTICACI√ìN');
console.log('-----------------------------');

const authHookPath = path.join(process.cwd(), 'hooks', 'use-auth.ts');
if (fs.existsSync(authHookPath)) {
  const authHook = fs.readFileSync(authHookPath, 'utf8');
  
  // Verificar problemas comunes
  const authChecks = [
    { name: 'useEffect Dependencies', pattern: /useEffect.*\[\]/, issue: 'Dependencias vac√≠as pueden causar re-renders' },
    { name: 'Multiple State Updates', pattern: /setUser.*setProfile.*setLoading/, issue: 'M√∫ltiples actualizaciones de estado' },
    { name: 'Auth Listener', pattern: /onAuthStateChange/, issue: 'Listener puede causar re-renders' },
  ];

  authChecks.forEach(check => {
    const found = check.pattern.test(authHook);
    const status = found ? '‚ö†Ô∏è' : '‚úÖ';
    console.log(`${status} ${check.name}: ${found ? check.issue : 'OK'}`);
  });
} else {
  console.log('‚ùå hooks/use-auth.ts no encontrado');
}

// 3. Verificar hooks de servicios
console.log('\nüì¶ 3. HOOKS DE SERVICIOS');
console.log('-------------------------');

const servicesHookPath = path.join(process.cwd(), 'hooks', 'use-services.ts');
if (fs.existsSync(servicesHookPath)) {
  const servicesHook = fs.readFileSync(servicesHookPath, 'utf8');
  
  const serviceChecks = [
    { name: 'Cache Implementation', pattern: /CACHE_DURATION/, issue: 'Cache implementado' },
    { name: 'useCallback Usage', pattern: /useCallback/, issue: 'Funciones memoizadas' },
    { name: 'useMemo Usage', pattern: /useMemo/, issue: 'Valores memoizados' },
    { name: 'Force Refresh', pattern: /forceRefresh/, issue: 'Mecanismo de refresh' },
  ];

  serviceChecks.forEach(check => {
    const found = check.pattern.test(servicesHook);
    const status = found ? '‚úÖ' : '‚ö†Ô∏è';
    console.log(`${status} ${check.name}: ${found ? 'Implementado' : 'No implementado'}`);
  });
} else {
  console.log('‚ùå hooks/use-services.ts no encontrado');
}

// 4. Verificar componentes cr√≠ticos
console.log('\nüß© 4. COMPONENTES CR√çTICOS');
console.log('---------------------------');

const componentsToCheck = [
  { path: 'components/auth-guard.tsx', name: 'AuthGuard' },
  { path: 'components/auth-provider.tsx', name: 'AuthProvider' },
  { path: 'components/layout-wrapper.tsx', name: 'LayoutWrapper' },
];

componentsToCheck.forEach(component => {
  const fullPath = path.join(process.cwd(), component.path);
  if (fs.existsSync(fullPath)) {
    const content = fs.readFileSync(fullPath, 'utf8');
    
    // Verificar problemas de rendimiento
    const hasUseEffect = /useEffect/.test(content);
    const hasUseState = /useState/.test(content);
    const hasRouter = /useRouter/.test(content);
    
    console.log(`üìÑ ${component.name}:`);
    console.log(`   ${hasUseEffect ? '‚úÖ' : '‚ùå'} useEffect: ${hasUseEffect ? 'Usado' : 'No usado'}`);
    console.log(`   ${hasUseState ? '‚úÖ' : '‚ùå'} useState: ${hasUseState ? 'Usado' : 'No usado'}`);
    console.log(`   ${hasRouter ? '‚ö†Ô∏è' : '‚úÖ'} useRouter: ${hasRouter ? 'Usado (puede causar re-renders)' : 'No usado'}`);
  } else {
    console.log(`‚ùå ${component.path} no encontrado`);
  }
});

// 5. Verificar middleware
console.log('\nüõ°Ô∏è 5. MIDDLEWARE');
console.log('----------------');

const middlewarePath = path.join(process.cwd(), 'middleware.ts');
if (fs.existsSync(middlewarePath)) {
  const middleware = fs.readFileSync(middlewarePath, 'utf8');
  
  const middlewareChecks = [
    { name: 'Security Headers', pattern: /X-Content-Type-Options/, issue: 'Headers de seguridad' },
    { name: 'Rate Limiting', pattern: /rate.*limit/i, issue: 'Rate limiting b√°sico' },
    { name: 'CORS Headers', pattern: /Access-Control-Allow-Origin/, issue: 'Headers CORS' },
  ];

  middlewareChecks.forEach(check => {
    const found = check.pattern.test(middleware);
    const status = found ? '‚úÖ' : '‚ö†Ô∏è';
    console.log(`${status} ${check.name}: ${found ? 'Configurado' : 'No configurado'}`);
  });
} else {
  console.log('‚ùå middleware.ts no encontrado');
}

// 6. Recomendaciones
console.log('\nüí° 6. RECOMENDACIONES DE OPTIMIZACI√ìN');
console.log('=====================================');

const recommendations = [
  {
    category: 'üöÄ Optimizaciones Inmediatas',
    items: [
      'Implementar React.memo() en componentes que no cambian frecuentemente',
      'Usar useMemo() para c√°lculos costosos',
      'Optimizar useCallback() para funciones que se pasan como props',
      'Implementar lazy loading para componentes pesados'
    ]
  },
  {
    category: 'üîß Configuraci√≥n de Next.js',
    items: [
      'Habilitar experimental.optimizeCss',
      'Configurar experimental.turbo para builds m√°s r√°pidos',
      'Optimizar configuraci√≥n de im√°genes',
      'Implementar ISR (Incremental Static Regeneration)'
    ]
  },
  {
    category: 'üì± Navegaci√≥n y Cach√©',
    items: [
      'Implementar prefetching inteligente',
      'Optimizar el router de Next.js',
      'Implementar cache headers apropiados',
      'Usar Suspense para loading states'
    ]
  },
  {
    category: 'üß† Memory Management',
    items: [
      'Limpiar event listeners en useEffect cleanup',
      'Evitar closures innecesarios',
      'Optimizar re-renders con React DevTools Profiler',
      'Implementar virtualizaci√≥n para listas largas'
    ]
  }
];

recommendations.forEach(rec => {
  console.log(`\n${rec.category}:`);
  rec.items.forEach(item => {
    console.log(`  ‚Ä¢ ${item}`);
  });
});

// 7. Scripts de optimizaci√≥n sugeridos
console.log('\nüõ†Ô∏è 7. SCRIPTS DE OPTIMIZACI√ìN SUGERIDOS');
console.log('========================================');

const optimizationScripts = [
  'scripts/optimize-components.js',
  'scripts/analyze-bundle.js',
  'scripts/performance-monitor.js',
  'scripts/cache-optimization.js'
];

optimizationScripts.forEach(script => {
  const scriptPath = path.join(process.cwd(), script);
  const exists = fs.existsSync(scriptPath);
  console.log(`${exists ? '‚úÖ' : '‚ùå'} ${script}: ${exists ? 'Disponible' : 'No creado'}`);
});

console.log('\nüéØ PR√ìXIMOS PASOS:');
console.log('==================');
console.log('1. Ejecutar: npm run build -- --debug');
console.log('2. Usar React DevTools Profiler para identificar re-renders');
console.log('3. Implementar las optimizaciones sugeridas');
console.log('4. Monitorear m√©tricas de rendimiento en producci√≥n');
console.log('5. Considerar implementar Service Worker para cach√© offline');

console.log('\n‚úÖ Diagn√≥stico completado'); 