// Script para diagnosticar d√≥nde se rompe la sesi√≥n del usuario
console.log('üîç DIAGN√ìSTICO DE RUPTURA DE SESI√ìN');
console.log('=====================================');

// Funci√≥n para verificar el estado de la sesi√≥n
async function checkSessionStatus() {
  console.log('üîê Verificando estado de sesi√≥n...');
  
  try {
    // Verificar si supabase est√° disponible
    if (typeof window.supabase === 'undefined') {
      console.error('‚ùå Supabase no est√° disponible en window');
      return { available: false, error: 'Supabase no disponible' };
    }
    
    const { data: { session }, error } = await window.supabase.auth.getSession();
    
    if (error) {
      console.error('‚ùå Error al obtener sesi√≥n:', error);
      return { available: false, error: error.message };
    }
    
    if (!session) {
      console.warn('‚ö†Ô∏è No hay sesi√≥n activa');
      return { available: false, session: null };
    }
    
    console.log('‚úÖ Sesi√≥n activa encontrada:', {
      userId: session.user?.id,
      email: session.user?.email,
      hasAccessToken: !!session.access_token,
      accessTokenLength: session.access_token?.length || 0,
      expiresAt: session.expires_at
    });
    
    return { available: true, session };
    
  } catch (error) {
    console.error('‚ùå Error inesperado al verificar sesi√≥n:', error);
    return { available: false, error: error.message };
  }
}

// Funci√≥n para simular el proceso de reserva paso a paso
async function simulateReservationProcess() {
  console.log('üöÄ Simulando proceso de reserva paso a paso...');
  
  // Paso 1: Verificar sesi√≥n inicial
  console.log('\nüìã PASO 1: Verificar sesi√≥n inicial');
  const initialSession = await checkSessionStatus();
  
  if (!initialSession.available) {
    console.error('‚ùå No se puede continuar sin sesi√≥n v√°lida');
    return;
  }
  
  // Paso 2: Crear datos de reserva
  console.log('\nüìã PASO 2: Crear datos de reserva');
  const reservationData = {
    user_id: initialSession.session.user.id,
    service_id: '08ae78c2-5622-404a-81ae-1a6dbd4ebdea',
    reservation_date: '2025-07-25',
    reservation_time: '12:00',
    guests: 1,
    total_amount: 90,
    status: "pendiente",
    payment_status: "pendiente",
    special_requests: null,
    contact_name: 'Test User',
    contact_email: 'test@example.com',
    contact_phone: '123456789',
  };
  
  console.log('üìä Datos de reserva:', reservationData);
  
  // Paso 3: Crear reserva
  console.log('\nüìã PASO 3: Crear reserva');
  try {
    const reservationResponse = await fetch('/api/reservations', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${initialSession.session.access_token}`,
      },
      body: JSON.stringify(reservationData)
    });
    
    console.log('üì• Respuesta de reserva:', reservationResponse.status);
    
    if (!reservationResponse.ok) {
      const errorData = await reservationResponse.json();
      console.error('‚ùå Error en reserva:', errorData);
      return;
    }
    
    const reservation = await reservationResponse.json();
    console.log('‚úÖ Reserva creada:', reservation.id);
    
    // Verificar sesi√≥n despu√©s de crear reserva
    console.log('\nüìã PASO 3.5: Verificar sesi√≥n despu√©s de reserva');
    const sessionAfterReservation = await checkSessionStatus();
    
    // Paso 4: Crear pago
    console.log('\nüìã PASO 4: Crear pago');
    const paymentResponse = await fetch('/api/payment/create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${initialSession.session.access_token}`,
      },
      body: JSON.stringify({
        reservationId: reservation.id,
        amount: 90,
        description: 'Reserva: Glamping'
      })
    });
    
    console.log('üì• Respuesta de pago:', paymentResponse.status);
    
    if (!paymentResponse.ok) {
      const errorData = await paymentResponse.json();
      console.error('‚ùå Error en pago:', errorData);
      return;
    }
    
    const paymentData = await paymentResponse.json();
    console.log('‚úÖ Datos de pago recibidos');
    
    // Verificar sesi√≥n despu√©s de crear pago
    console.log('\nüìã PASO 4.5: Verificar sesi√≥n despu√©s de pago');
    const sessionAfterPayment = await checkSessionStatus();
    
    // Paso 5: Crear formulario
    console.log('\nüìã PASO 5: Crear formulario');
    const form = document.createElement('form');
    form.method = 'POST';
    form.action = paymentData.redsysUrl;
    
    Object.entries(paymentData.formData).forEach(([key, value]) => {
      const input = document.createElement('input');
      input.type = 'hidden';
      input.name = key;
      input.value = value;
      form.appendChild(input);
    });
    
    document.body.appendChild(form);
    console.log('‚úÖ Formulario creado y agregado al DOM');
    
    // Verificar sesi√≥n antes de enviar formulario
    console.log('\nüìã PASO 5.5: Verificar sesi√≥n antes de enviar');
    const sessionBeforeSubmit = await checkSessionStatus();
    
    // Paso 6: Enviar formulario (con confirmaci√≥n)
    console.log('\nüìã PASO 6: Enviar formulario');
    console.log('üìç URL destino:', paymentData.redsysUrl);
    console.log('üìä Campos del formulario:', Object.keys(paymentData.formData));
    
    const confirmed = confirm(`¬øProceder con el env√≠o del formulario?\n\nURL: ${paymentData.redsysUrl}\n\nEsto nos ayudar√° a identificar d√≥nde se rompe la sesi√≥n.`);
    
    if (confirmed) {
      console.log('üöÄ Enviando formulario...');
      form.submit();
    } else {
      console.log('‚ùå Env√≠o cancelado por el usuario');
    }
    
  } catch (error) {
    console.error('‚ùå Error en simulaci√≥n:', error);
  }
}

// Funci√≥n para crear bot√≥n de diagn√≥stico
function createDiagnosticButton() {
  console.log('üîß Creando bot√≥n de diagn√≥stico...');
  
  const diagnosticButton = document.createElement('button');
  diagnosticButton.textContent = 'üîç Diagnosticar Sesi√≥n';
  diagnosticButton.style.cssText = `
    position: fixed;
    top: 540px;
    right: 20px;
    z-index: 10000;
    background: #dc2626;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 14px;
    font-weight: bold;
  `;
  
  diagnosticButton.onclick = async () => {
    console.log('üîç Iniciando diagn√≥stico de sesi√≥n...');
    
    // Verificar sesi√≥n actual
    const currentSession = await checkSessionStatus();
    
    if (!currentSession.available) {
      alert('‚ùå No hay sesi√≥n activa. Por favor, inicia sesi√≥n primero.');
      return;
    }
    
    // Iniciar simulaci√≥n paso a paso
    await simulateReservationProcess();
  };
  
  document.body.appendChild(diagnosticButton);
  console.log('‚úÖ Bot√≥n de diagn√≥stico creado');
}

// Funci√≥n para crear bot√≥n de verificaci√≥n r√°pida
function createQuickCheckButton() {
  console.log('‚ö° Creando bot√≥n de verificaci√≥n r√°pida...');
  
  const quickButton = document.createElement('button');
  quickButton.textContent = '‚ö° Verificar Sesi√≥n';
  quickButton.style.cssText = `
    position: fixed;
    top: 580px;
    right: 20px;
    z-index: 10000;
    background: #f59e0b;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 14px;
  `;
  
  quickButton.onclick = async () => {
    const sessionStatus = await checkSessionStatus();
    
    if (sessionStatus.available) {
      alert('‚úÖ Sesi√≥n activa y v√°lida');
    } else {
      alert(`‚ùå Problema con la sesi√≥n: ${sessionStatus.error || 'No hay sesi√≥n'}`);
    }
  };
  
  document.body.appendChild(quickButton);
  console.log('‚úÖ Bot√≥n de verificaci√≥n r√°pida creado');
}

// Funci√≥n para crear panel de informaci√≥n
function createInfoPanel() {
  console.log('üìä Creando panel de informaci√≥n...');
  
  const infoPanel = document.createElement('div');
  infoPanel.id = 'session-diagnostic-panel';
  infoPanel.style.cssText = `
    position: fixed;
    top: 620px;
    right: 20px;
    z-index: 10000;
    background: #1f2937;
    color: white;
    padding: 15px;
    border-radius: 8px;
    font-size: 12px;
    max-width: 300px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  `;
  
  infoPanel.innerHTML = `
    <h3 style="margin: 0 0 10px 0; color: #fbbf24;">üîç Diagn√≥stico de Sesi√≥n</h3>
    <p style="margin: 5px 0; color: #60a5fa;">üî¥ Diagn√≥stico Completo</p>
    <p style="margin: 5px 0; color: #fbbf24;">‚ö° Verificaci√≥n R√°pida</p>
    <p style="color: #10b981; font-size: 10px; margin-top: 10px;">Identifica d√≥nde se rompe la sesi√≥n</p>
  `;
  
  document.body.appendChild(infoPanel);
  console.log('‚úÖ Panel de informaci√≥n creado');
}

// Ejecutar funciones
createDiagnosticButton();
createQuickCheckButton();
createInfoPanel();

console.log('üéâ Script de diagn√≥stico de sesi√≥n completado');
console.log('üí° Usa el bot√≥n rojo para diagn√≥stico completo o el naranja para verificaci√≥n r√°pida'); 