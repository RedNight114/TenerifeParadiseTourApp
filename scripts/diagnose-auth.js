#!/usr/bin/env node

/**
 * Script de diagn√≥stico para el sistema de autenticaci√≥n
 * Verifica el estado de Supabase, las variables de entorno y la conexi√≥n
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

async function diagnoseAuth() {
  console.log('üîç Diagn√≥stico del sistema de autenticaci√≥n...\n')

  // 1. Verificar variables de entorno
  console.log('1Ô∏è‚É£ Verificando variables de entorno...')
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

  if (!supabaseUrl) {
    console.error('‚ùå NEXT_PUBLIC_SUPABASE_URL no est√° definida')
    return
  }
  if (!supabaseAnonKey) {
    console.error('‚ùå NEXT_PUBLIC_SUPABASE_ANON_KEY no est√° definida')
    return
  }

  console.log('‚úÖ Variables de entorno encontradas')
  console.log(`   URL: ${supabaseUrl}`)
  console.log(`   Key: ${supabaseAnonKey.substring(0, 20)}...`)

  // 2. Crear cliente de Supabase
  console.log('\n2Ô∏è‚É£ Creando cliente de Supabase...')
  const supabase = createClient(supabaseUrl, supabaseAnonKey)

  // 3. Verificar conexi√≥n
  console.log('\n3Ô∏è‚É£ Verificando conexi√≥n con Supabase...')
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('id')
      .limit(1)

    if (error) {
      console.error('‚ùå Error de conexi√≥n:', error.message)
      return
    }

    console.log('‚úÖ Conexi√≥n exitosa con Supabase')
  } catch (error) {
    console.error('‚ùå Error de conexi√≥n:', error.message)
    return
  }

  // 4. Verificar autenticaci√≥n
  console.log('\n4Ô∏è‚É£ Verificando sistema de autenticaci√≥n...')
  try {
    const { data: { session }, error } = await supabase.auth.getSession()
    
    if (error) {
      console.error('‚ùå Error al obtener sesi√≥n:', error.message)
    } else if (session) {
      console.log('‚úÖ Sesi√≥n activa encontrada')
      console.log(`   Usuario: ${session.user.email}`)
      console.log(`   ID: ${session.user.id}`)
    } else {
      console.log('‚ÑπÔ∏è No hay sesi√≥n activa')
    }
  } catch (error) {
    console.error('‚ùå Error en autenticaci√≥n:', error.message)
  }

  // 5. Verificar tablas necesarias
  console.log('\n5Ô∏è‚É£ Verificando tablas de la base de datos...')
  const tables = ['profiles', 'auth.users']
  
  for (const table of tables) {
    try {
      const { data, error } = await supabase
        .from(table === 'auth.users' ? 'profiles' : table)
        .select('*')
        .limit(1)

      if (error) {
        console.error(`‚ùå Error en tabla ${table}:`, error.message)
      } else {
        console.log(`‚úÖ Tabla ${table} accesible`)
      }
    } catch (error) {
      console.error(`‚ùå Error accediendo a ${table}:`, error.message)
    }
  }

  // 6. Verificar pol√≠ticas RLS
  console.log('\n6Ô∏è‚É£ Verificando pol√≠ticas RLS...')
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .limit(1)

    if (error && error.code === 'PGRST301') {
      console.error('‚ùå Error de pol√≠ticas RLS:', error.message)
    } else if (error) {
      console.error('‚ùå Error en consulta:', error.message)
    } else {
      console.log('‚úÖ Pol√≠ticas RLS funcionando correctamente')
    }
  } catch (error) {
    console.error('‚ùå Error verificando RLS:', error.message)
  }

  console.log('\n‚úÖ Diagn√≥stico completado')
}

// Ejecutar diagn√≥stico
diagnoseAuth().catch(console.error) 