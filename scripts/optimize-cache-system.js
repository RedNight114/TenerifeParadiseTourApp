#!/usr/bin/env node

/**
 * üöÄ SCRIPT DE OPTIMIZACI√ìN DEL SISTEMA DE CACHE
 * 
 * Este script optimiza el sistema de cache para prevenir cargas infinitas
 * y mejorar el rendimiento general de la aplicaci√≥n.
 */

const fs = require('fs')
const path = require('path')

console.log('üîß Iniciando optimizaci√≥n del sistema de cache...')

// Configuraci√≥n de optimizaci√≥n
const OPTIMIZATION_CONFIG = {
  // L√≠mites de cache m√°s conservadores
  maxSize: 300, // Reducido de 500
  maxMemoryMB: 15, // Reducido de 25
  cleanupInterval: 60000, // 1 minuto (m√°s frecuente)
  maxAccessCount: 30, // Reducido para detectar loops m√°s r√°pido
  maxErrorCount: 2, // Reducido para ser m√°s estricto
  maxRetryCount: 1, // Reducido para evitar loops
  errorThreshold: 0.2, // 20% de tasa de error
  recoveryDelay: 15000 // 15 segundos de espera
}

// Funci√≥n para limpiar cache del navegador
function clearBrowserCache() {
  console.log('üßπ Limpiando cache del navegador...')
  
  const cacheDirs = [
    '.next/cache',
    'node_modules/.cache',
    'out',
    'dist'
  ]
  
  cacheDirs.forEach(dir => {
    if (fs.existsSync(dir)) {
      try {
        fs.rmSync(dir, { recursive: true, force: true })
        console.log(`‚úÖ Cache eliminado: ${dir}`)
      } catch (error) {
        console.log(`‚ö†Ô∏è No se pudo eliminar: ${dir}`)
      }
    }
  })
}

// Funci√≥n para optimizar el archivo de cache manager
function optimizeCacheManager() {
  console.log('‚ö° Optimizando cache manager...')
  
  const cacheManagerPath = path.join(__dirname, '..', 'lib', 'cache-manager.ts')
  
  if (!fs.existsSync(cacheManagerPath)) {
    console.log('‚ùå No se encontr√≥ el archivo cache-manager.ts')
    return false
  }
  
  try {
    let content = fs.readFileSync(cacheManagerPath, 'utf8')
    
    // Aplicar optimizaciones
    const optimizations = [
      {
        from: /maxSize: 500,/,
        to: `maxSize: ${OPTIMIZATION_CONFIG.maxSize},`
      },
      {
        from: /maxMemoryMB: 25,/,
        to: `maxMemoryMB: ${OPTIMIZATION_CONFIG.maxMemoryMB},`
      },
      {
        from: /cleanupInterval: 2 \* 60 \* 1000,/,
        to: `cleanupInterval: ${OPTIMIZATION_CONFIG.cleanupInterval},`
      },
      {
        from: /maxAccessCount: 50,/,
        to: `maxAccessCount: ${OPTIMIZATION_CONFIG.maxAccessCount},`
      },
      {
        from: /maxErrorCount: 3,/,
        to: `maxErrorCount: ${OPTIMIZATION_CONFIG.maxErrorCount},`
      },
      {
        from: /maxRetryCount: 2,/,
        to: `maxRetryCount: ${OPTIMIZATION_CONFIG.maxRetryCount},`
      },
      {
        from: /errorThreshold: 0\.3,/,
        to: `errorThreshold: ${OPTIMIZATION_CONFIG.errorThreshold},`
      },
      {
        from: /recoveryDelay: 30 \* 1000/,
        to: `recoveryDelay: ${OPTIMIZATION_CONFIG.recoveryDelay}`
      }
    ]
    
    optimizations.forEach(opt => {
      content = content.replace(opt.from, opt.to)
    })
    
    // Crear backup
    const backupPath = cacheManagerPath + '.backup'
    fs.writeFileSync(backupPath, fs.readFileSync(cacheManagerPath))
    console.log(`üíæ Backup creado: ${backupPath}`)
    
    // Escribir archivo optimizado
    fs.writeFileSync(cacheManagerPath, content)
    console.log('‚úÖ Cache manager optimizado')
    
    return true
  } catch (error) {
    console.error('‚ùå Error optimizando cache manager:', error.message)
    return false
  }
}

// Funci√≥n para crear componente de monitoreo
function createCacheMonitor() {
  console.log('üìä Creando componente de monitoreo...')
  
  const monitorPath = path.join(__dirname, '..', 'components', 'cache-monitor.tsx')
  
  if (fs.existsSync(monitorPath)) {
    console.log('‚úÖ Componente de monitoreo ya existe')
    return true
  }
  
  try {
    const monitorContent = `"use client"

import { useState, useEffect, useCallback } from 'react'
import { useCache, getCacheStats, clearCache, isInRecoveryMode } from '@/lib/cache-manager'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { 
  Activity, 
  AlertTriangle, 
  RefreshCw, 
  Trash2, 
  Shield, 
  Database
} from 'lucide-react'

export function CacheMonitor() {
  const { stats, recoveryMode } = useCache()
  const [isVisible, setIsVisible] = useState(false)

  if (process.env.NODE_ENV !== 'development') {
    return null
  }

  const getHealthStatus = () => {
    if (recoveryMode) return 'critical'
    if (stats.errorRate > 0.2) return 'warning'
    if (stats.errorRate > 0.1) return 'caution'
    return 'healthy'
  }

  return (
    <div className="fixed bottom-4 right-4 z-50">
      <Button
        variant="outline"
        size="sm"
        onClick={() => setIsVisible(!isVisible)}
        className="mb-2"
      >
        <Database className="w-4 h-4 mr-2" />
        Cache Monitor
        {recoveryMode && (
          <Badge variant="destructive" className="ml-2">
            Recovery
          </Badge>
        )}
      </Button>

      {isVisible && (
        <Card className="w-80">
          <CardHeader>
            <CardTitle className="text-sm">Cache Status</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {recoveryMode && (
              <Alert>
                <Shield className="h-4 w-4" />
                <AlertDescription>
                  Modo recuperaci√≥n activo
                </AlertDescription>
              </Alert>
            )}
            
            <div className="grid grid-cols-2 gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold">{stats.size}</div>
                <div className="text-xs text-muted-foreground">Entries</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold">
                  {((stats.hits / (stats.hits + stats.misses)) * 100).toFixed(1)}%
                </div>
                <div className="text-xs text-muted-foreground">Hit Rate</div>
              </div>
            </div>

            <div className="flex gap-2">
              <Button
                size="sm"
                variant="outline"
                onClick={() => clearCache()}
                className="flex-1"
              >
                <Trash2 className="w-3 h-3 mr-1" />
                Clear
              </Button>
              <Button
                size="sm"
                variant="outline"
                onClick={() => window.location.reload()}
                className="flex-1"
              >
                <RefreshCw className="w-3 h-3 mr-1" />
                Refresh
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}`

    fs.writeFileSync(monitorPath, monitorContent)
    console.log('‚úÖ Componente de monitoreo creado')
    
    return true
  } catch (error) {
    console.error('‚ùå Error creando componente de monitoreo:', error.message)
    return false
  }
}

// Funci√≥n para actualizar el layout principal
function updateLayout() {
  console.log('üèóÔ∏è Actualizando layout principal...')
  
  const layoutPath = path.join(__dirname, '..', 'app', 'layout.tsx')
  
  if (!fs.existsSync(layoutPath)) {
    console.log('‚ùå No se encontr√≥ el archivo layout.tsx')
    return false
  }
  
  try {
    let content = fs.readFileSync(layoutPath, 'utf8')
    
    // Verificar si ya est√° incluido
    if (content.includes('CacheMonitor')) {
      console.log('‚úÖ CacheMonitor ya est√° incluido en el layout')
      return true
    }
    
    // Agregar import
    if (!content.includes("import { CacheMonitor }")) {
      const importStatement = "import { CacheMonitor } from '@/components/cache-monitor'"
      content = content.replace(
        /import.*from.*['"]@\/components\/.*['"];?\n?/g,
        match => match + importStatement + '\n'
      )
    }
    
    // Agregar componente al final del body
    if (!content.includes('<CacheMonitor')) {
      content = content.replace(
        /<\/body>/,
        '      <CacheMonitor />\n    </body>'
      )
    }
    
    fs.writeFileSync(layoutPath, content)
    console.log('‚úÖ Layout actualizado con CacheMonitor')
    
    return true
  } catch (error) {
    console.error('‚ùå Error actualizando layout:', error.message)
    return false
  }
}

// Funci√≥n para crear script de limpieza autom√°tica
function createAutoCleanupScript() {
  console.log('ü§ñ Creando script de limpieza autom√°tica...')
  
  const scriptPath = path.join(__dirname, 'auto-cache-cleanup.js')
  
  const scriptContent = `#!/usr/bin/env node

/**
 * ü§ñ SCRIPT DE LIMPIEZA AUTOM√ÅTICA DE CACHE
 * 
 * Este script se ejecuta autom√°ticamente para limpiar el cache
 * y prevenir problemas de memoria y cargas infinitas.
 */

const fs = require('fs')
const path = require('path')

console.log('üßπ Ejecutando limpieza autom√°tica de cache...')

// Limpiar directorios de cache
const cacheDirs = [
  '.next/cache',
  'node_modules/.cache',
  'out',
  'dist'
]

let cleanedCount = 0

cacheDirs.forEach(dir => {
  if (fs.existsSync(dir)) {
    try {
      fs.rmSync(dir, { recursive: true, force: true })
      cleanedCount++
      console.log(\`‚úÖ Cache eliminado: \${dir}\`)
    } catch (error) {
      console.log(\`‚ö†Ô∏è No se pudo eliminar: \${dir}\`)
    }
  }
})

console.log(\`üéâ Limpieza completada: \${cleanedCount} directorios limpiados\`)

// Crear archivo de timestamp
const timestampPath = path.join(__dirname, '.last-cleanup')
fs.writeFileSync(timestampPath, new Date().toISOString())

console.log('‚úÖ Timestamp de limpieza guardado')
`

  fs.writeFileSync(scriptPath, scriptContent)
  fs.chmodSync(scriptPath, '755') // Hacer ejecutable
  
  console.log('‚úÖ Script de limpieza autom√°tica creado')
  
  return true
}

// Funci√≥n para actualizar package.json
function updatePackageJson() {
  console.log('üì¶ Actualizando package.json...')
  
  const packagePath = path.join(__dirname, '..', 'package.json')
  
  if (!fs.existsSync(packagePath)) {
    console.log('‚ùå No se encontr√≥ package.json')
    return false
  }
  
  try {
    const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'))
    
    // Agregar scripts de cache
    const newScripts = {
      'cache:clean': 'node scripts/auto-cache-cleanup.js',
      'cache:optimize': 'node scripts/optimize-cache-system.js',
      'dev:clean': 'npm run cache:clean && npm run dev',
      'build:clean': 'npm run cache:clean && npm run build'
    }
    
    packageJson.scripts = { ...packageJson.scripts, ...newScripts }
    
    fs.writeFileSync(packagePath, JSON.stringify(packageJson, null, 2))
    console.log('‚úÖ Package.json actualizado con scripts de cache')
    
    return true
  } catch (error) {
    console.error('‚ùå Error actualizando package.json:', error.message)
    return false
  }
}

// Funci√≥n principal
function main() {
  console.log('üöÄ Iniciando optimizaci√≥n completa del sistema de cache...\n')
  
  const steps = [
    { name: 'Limpiar cache del navegador', fn: clearBrowserCache },
    { name: 'Optimizar cache manager', fn: optimizeCacheManager },
    { name: 'Crear componente de monitoreo', fn: createCacheMonitor },
    { name: 'Actualizar layout principal', fn: updateLayout },
    { name: 'Crear script de limpieza autom√°tica', fn: createAutoCleanupScript },
    { name: 'Actualizar package.json', fn: updatePackageJson }
  ]
  
  let successCount = 0
  
  steps.forEach((step, index) => {
    console.log(`${index + 1}/${steps.length}. ${step.name}...`)
    
    try {
      const result = step.fn()
      if (result !== false) {
        successCount++
      }
    } catch (error) {
      console.error(`‚ùå Error en ${step.name}:`, error.message)
    }
    
    console.log('')
  })
  
  console.log('üéâ Optimizaci√≥n completada!')
  console.log(`‚úÖ ${successCount}/${steps.length} pasos exitosos`)
  console.log('')
  console.log('üìã Resumen de optimizaciones aplicadas:')
  console.log('‚Ä¢ L√≠mites de cache m√°s conservadores')
  console.log('‚Ä¢ Detecci√≥n m√°s r√°pida de loops infinitos')
  console.log('‚Ä¢ Modo recuperaci√≥n mejorado')
  console.log('‚Ä¢ Componente de monitoreo en tiempo real')
  console.log('‚Ä¢ Scripts de limpieza autom√°tica')
  console.log('‚Ä¢ Configuraci√≥n optimizada para prevenir cargas infinitas')
  console.log('')
  console.log('üöÄ Para aplicar los cambios:')
  console.log('1. npm run cache:clean')
  console.log('2. npm run dev')
  console.log('')
  console.log('üìä Para monitorear el cache:')
  console.log('‚Ä¢ Abre la aplicaci√≥n en desarrollo')
  console.log('‚Ä¢ Busca el bot√≥n "Cache Monitor" en la esquina inferior derecha')
  console.log('‚Ä¢ Usa los controles para limpiar cache y refrescar')
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  main()
}

module.exports = {
  main,
  clearBrowserCache,
  optimizeCacheManager,
  createCacheMonitor,
  updateLayout,
  createAutoCleanupScript,
  updatePackageJson
} 