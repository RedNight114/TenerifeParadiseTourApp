#!/usr/bin/env node

/**
 * üîß Fix Completo de Hidrataci√≥n - Tenerife Paradise Tours
 * 
 * Este script realiza una limpieza completa y reinicia todo para solucionar
 * problemas de hidrataci√≥n de React.
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîß FIX COMPLETO DE HIDRATACI√ìN');
console.log('==============================\n');

// 1. Detener procesos en puertos
console.log('üõë Deteniendo procesos en puertos...');
try {
  execSync('npx kill-port 3000 3001 3002', { stdio: 'ignore' });
  console.log('‚úÖ Procesos detenidos');
} catch (error) {
  console.log('‚ö†Ô∏è No se pudieron detener procesos:', error.message);
}

// 2. Limpiar cach√© de Next.js
console.log('\nüì¶ Limpiando cach√© de Next.js...');
try {
  execSync('npx next clean', { stdio: 'inherit' });
  console.log('‚úÖ Cach√© de Next.js limpiado');
} catch (error) {
  console.log('‚ö†Ô∏è Error limpiando cach√© de Next.js:', error.message);
}

// 3. Limpiar archivos temporales
console.log('\nüóÇÔ∏è Limpiando archivos temporales...');
const tempDirs = ['.next', '.vercel', 'out', 'node_modules/.cache', 'dist'];
tempDirs.forEach(dir => {
  const dirPath = path.join(process.cwd(), dir);
  if (fs.existsSync(dirPath)) {
    try {
      fs.rmSync(dirPath, { recursive: true, force: true });
      console.log(`‚úÖ ${dir} eliminado`);
    } catch (error) {
      console.log(`‚ö†Ô∏è Error eliminando ${dir}:`, error.message);
    }
  }
});

// 4. Limpiar logs
console.log('\nüìù Limpiando logs...');
const logFiles = ['npm-debug.log', 'yarn-error.log', 'pnpm-debug.log', '.next/error.log'];
logFiles.forEach(logFile => {
  const logPath = path.join(process.cwd(), logFile);
  if (fs.existsSync(logPath)) {
    try {
      fs.unlinkSync(logPath);
      console.log(`‚úÖ ${logFile} eliminado`);
    } catch (error) {
      console.log(`‚ö†Ô∏è Error eliminando ${logFile}:`, error.message);
    }
  }
});

// 5. Verificar archivos cr√≠ticos
console.log('\nüîç Verificando archivos cr√≠ticos...');
const criticalFiles = [
  'components/hydration-safe.tsx',
  'components/featured-services.tsx',
  'app/(main)/page.tsx',
  'hooks/use-services-advanced.ts'
];

criticalFiles.forEach(file => {
  const filePath = path.join(process.cwd(), file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file} presente`);
  } else {
    console.log(`‚ùå ${file} faltante`);
  }
});

// 6. Verificar variables de entorno
console.log('\nüåç Verificando variables de entorno...');
const envFiles = ['.env.local', '.env'];
envFiles.forEach(envFile => {
  const envPath = path.join(process.cwd(), envFile);
  if (fs.existsSync(envPath)) {
    console.log(`‚úÖ ${envFile} presente`);
  } else {
    console.log(`‚ö†Ô∏è ${envFile} no encontrado`);
  }
});

// 7. Limpiar cach√© de npm
console.log('\nüì¶ Limpiando cach√© de npm...');
try {
  execSync('npm cache clean --force', { stdio: 'inherit' });
  console.log('‚úÖ Cach√© de npm limpiado');
} catch (error) {
  console.log('‚ö†Ô∏è Error limpiando cach√© de npm:', error.message);
}

// 8. Reinstalar dependencias si es necesario
console.log('\nüì¶ Verificando dependencias...');
try {
  execSync('npm install', { stdio: 'inherit' });
  console.log('‚úÖ Dependencias verificadas');
} catch (error) {
  console.log('‚ö†Ô∏è Error verificando dependencias:', error.message);
}

console.log('\nüéØ RECOMENDACIONES POST-FIX:');
console.log('============================');
console.log('1. Reiniciar el servidor: npm run dev');
console.log('2. Limpiar cach√© del navegador (Ctrl+Shift+Delete)');
console.log('3. Probar en ventana de inc√≥gnito');
console.log('4. Verificar que no hay errores de hidrataci√≥n');
console.log('5. Comprobar que los iconos SVG se renderizan correctamente');

console.log('\nüí° SOLUCIONES ADICIONALES:');
console.log('==========================');
console.log('‚Ä¢ Si persisten los errores, verificar que todos los componentes usen SuppressHydrationWarning');
console.log('‚Ä¢ Asegurar que los iconos SVG no se rendericen en el servidor');
console.log('‚Ä¢ Verificar que los hooks de estado solo se usen en componentes cliente');
console.log('‚Ä¢ Comprobar que no hay diferencias entre SSR y CSR');
console.log('‚Ä¢ Usar AfterHydration para contenido que depende del cliente');

console.log('\nüîß COMANDOS √öTILES:');
console.log('==================');
console.log('‚Ä¢ npm run dev:fix - Fix + reinicio autom√°tico');
console.log('‚Ä¢ npm run fix:hydration - Solo fix de hidrataci√≥n');
console.log('‚Ä¢ npm run clean:cache - Limpieza de cach√©');
console.log('‚Ä¢ npm run dev - Reinicio manual');

console.log('\n‚úÖ Fix completo de hidrataci√≥n completado');
console.log('üöÄ Ejecuta "npm run dev" para reiniciar el servidor'); 