#!/usr/bin/env node

/**
 * Script para verificar la configuraci√≥n de autenticaci√≥n
 * Ejecutar con: node scripts/check-auth-config.js
 */

// Cargar variables de entorno desde .env.local
const fs = require('fs')
const path = require('path')

// Funci√≥n para cargar variables de entorno desde archivo
function loadEnvFile(filePath) {
  if (fs.existsSync(filePath)) {
    const content = fs.readFileSync(filePath, 'utf8')
    const lines = content.split('\n')
    
    lines.forEach(line => {
      const trimmedLine = line.trim()
      if (trimmedLine && !trimmedLine.startsWith('#')) {
        const [key, ...valueParts] = trimmedLine.split('=')
        if (key && valueParts.length > 0) {
          const value = valueParts.join('=').replace(/^["']|["']$/g, '')
          process.env[key] = value
        }
      }
    })
    
    console.log(`‚úÖ Archivo ${path.basename(filePath)} cargado`)
  } else {
    console.log(`‚ö†Ô∏è Archivo ${path.basename(filePath)} no encontrado`)
  }
}

// Cargar archivos de entorno en orden de prioridad
const envFiles = ['.env.local', '.env']
envFiles.forEach(file => {
  loadEnvFile(path.join(process.cwd(), file))
})

console.log('üîç Verificando configuraci√≥n de autenticaci√≥n...\n')

// Verificar variables de entorno
const requiredEnvVars = [
  'NEXT_PUBLIC_SUPABASE_URL',
  'NEXT_PUBLIC_SUPABASE_ANON_KEY'
]

const missingVars = []
const configVars = {}

requiredEnvVars.forEach(varName => {
  const value = process.env[varName]
  if (!value) {
    missingVars.push(varName)
    configVars[varName] = '‚ùå FALTANTE'
  } else {
    configVars[varName] = '‚úÖ Configurada'
  }
})

console.log('üìã Variables de entorno:')
Object.entries(configVars).forEach(([varName, status]) => {
  console.log(`  ${varName}: ${status}`)
})

if (missingVars.length > 0) {
  console.log('\n‚ùå ERROR: Faltan variables de entorno requeridas:')
  missingVars.forEach(varName => {
    console.log(`  - ${varName}`)
  })
  console.log('\nüí° Soluci√≥n:')
  console.log('1. Verifica que el archivo .env.local existe y contiene las variables')
  console.log('2. Aseg√∫rate de que las variables est√©n en el formato correcto:')
  console.log('   NEXT_PUBLIC_SUPABASE_URL=https://tu-proyecto.supabase.co')
  console.log('   NEXT_PUBLIC_SUPABASE_ANON_KEY=tu_clave_anonima')
  console.log('3. Reinicia el servidor de desarrollo')
  process.exit(1)
}

console.log('\n‚úÖ Todas las variables de entorno est√°n configuradas')

// Verificar formato de URL de Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
if (supabaseUrl && !supabaseUrl.includes('supabase.co')) {
  console.log('\n‚ö†Ô∏è ADVERTENCIA: La URL de Supabase no parece ser v√°lida')
  console.log(`   URL actual: ${supabaseUrl}`)
  console.log('   Deber√≠a ser algo como: https://tu-proyecto.supabase.co')
}

// Verificar formato de clave an√≥nima
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
if (supabaseKey && !supabaseKey.startsWith('eyJ')) {
  console.log('\n‚ö†Ô∏è ADVERTENCIA: La clave an√≥nima de Supabase no parece ser v√°lida')
  console.log('   Deber√≠a empezar con "eyJ" (formato JWT)')
}

console.log('\nüéâ Configuraci√≥n de autenticaci√≥n verificada correctamente')
console.log('\nüìù Pr√≥ximos pasos:')
console.log('1. Aseg√∫rate de que tu proyecto de Supabase est√© activo')
console.log('2. Verifica que la autenticaci√≥n est√© habilitada en Supabase')
console.log('3. Confirma que las pol√≠ticas RLS permitan inserci√≥n en la tabla profiles')
console.log('4. Prueba el registro en la aplicaci√≥n') 