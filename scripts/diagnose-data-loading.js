#!/usr/bin/env node

/**
 * üîç Diagn√≥stico de Carga de Datos - Tenerife Paradise Tours
 * 
 * Este script diagnostica problemas espec√≠ficos de carga de datos:
 * - Inicializaci√≥n de Supabase
 * - Variables de entorno
 * - Conexi√≥n a la base de datos
 * - Autenticaci√≥n
 * - Permisos RLS
 */

const fs = require('fs');
const path = require('path');

console.log('üîç DIAGN√ìSTICO DE CARGA DE DATOS');
console.log('=================================\n');

// 1. Verificar variables de entorno
console.log('üîß 1. VERIFICANDO VARIABLES DE ENTORNO');
console.log('---------------------------------------');

const envFiles = ['.env.local', '.env', '.env.production'];
let envContent = '';

envFiles.forEach(envFile => {
  const envPath = path.join(process.cwd(), envFile);
  if (fs.existsSync(envPath)) {
    console.log(`‚úÖ ${envFile} encontrado`);
    envContent += fs.readFileSync(envPath, 'utf8') + '\n';
  } else {
    console.log(`‚ùå ${envFile} no encontrado`);
  }
});

// Verificar variables cr√≠ticas
const requiredVars = [
  'NEXT_PUBLIC_SUPABASE_URL',
  'NEXT_PUBLIC_SUPABASE_ANON_KEY',
  'SUPABASE_SERVICE_ROLE_KEY'
];

requiredVars.forEach(varName => {
  const hasVar = envContent.includes(varName);
  const status = hasVar ? '‚úÖ' : '‚ùå';
  console.log(`${status} ${varName}: ${hasVar ? 'Configurado' : 'FALTANTE'}`);
});

// 2. Verificar configuraci√≥n de Supabase
console.log('\nüîß 2. VERIFICANDO CONFIGURACI√ìN DE SUPABASE');
console.log('--------------------------------------------');

const supabaseFiles = [
  'lib/supabase-optimized.ts',
  'lib/supabase.ts',
  'hooks/use-auth.ts',
  'hooks/use-services.ts'
];

supabaseFiles.forEach(file => {
  const filePath = path.join(process.cwd(), file);
  if (fs.existsSync(filePath)) {
    const content = fs.readFileSync(filePath, 'utf8');
    
    console.log(`üìÑ ${file}:`);
    
    // Verificar importaciones
    const hasImport = /import.*supabase/.test(content);
    console.log(`   ${hasImport ? '‚úÖ' : '‚ùå'} Importaciones: ${hasImport ? 'OK' : 'Problema'}`);
    
    // Verificar getSupabaseClient
    const hasGetClient = /getSupabaseClient/.test(content);
    console.log(`   ${hasGetClient ? '‚úÖ' : '‚ùå'} getSupabaseClient: ${hasGetClient ? 'Usado' : 'No usado'}`);
    
    // Verificar manejo de errores
    const hasErrorHandling = /error.*catch|try.*catch/.test(content);
    console.log(`   ${hasErrorHandling ? '‚úÖ' : '‚ö†Ô∏è'} Manejo de errores: ${hasErrorHandling ? 'Implementado' : 'B√°sico'}`);
    
  } else {
    console.log(`‚ùå ${file} no encontrado`);
  }
});

// 3. Verificar hooks cr√≠ticos
console.log('\nüîß 3. VERIFICANDO HOOKS CR√çTICOS');
console.log('--------------------------------');

const hooksToCheck = [
  { path: 'hooks/use-auth.ts', name: 'useAuth' },
  { path: 'hooks/use-services.ts', name: 'useServices' },
  { path: 'hooks/use-reservations.ts', name: 'useReservations' }
];

hooksToCheck.forEach(hook => {
  const hookPath = path.join(process.cwd(), hook.path);
  if (fs.existsSync(hookPath)) {
    const content = fs.readFileSync(hookPath, 'utf8');
    
    console.log(`üìÑ ${hook.name}:`);
    
    // Verificar useEffect
    const hasUseEffect = /useEffect/.test(content);
    console.log(`   ${hasUseEffect ? '‚úÖ' : '‚ùå'} useEffect: ${hasUseEffect ? 'Usado' : 'No usado'}`);
    
    // Verificar useState
    const hasUseState = /useState/.test(content);
    console.log(`   ${hasUseState ? '‚úÖ' : '‚ùå'} useState: ${hasUseState ? 'Usado' : 'No usado'}`);
    
    // Verificar loading state
    const hasLoading = /loading.*state|setLoading/.test(content);
    console.log(`   ${hasLoading ? '‚úÖ' : '‚ö†Ô∏è'} Loading state: ${hasLoading ? 'Implementado' : 'Faltante'}`);
    
    // Verificar error handling
    const hasErrorState = /error.*state|setError/.test(content);
    console.log(`   ${hasErrorState ? '‚úÖ' : '‚ö†Ô∏è'} Error handling: ${hasErrorState ? 'Implementado' : 'Faltante'}`);
    
  } else {
    console.log(`‚ùå ${hook.path} no encontrado`);
  }
});

// 4. Verificar componentes de autenticaci√≥n
console.log('\nüîß 4. VERIFICANDO COMPONENTES DE AUTENTICACI√ìN');
console.log('------------------------------------------------');

const authComponents = [
  { path: 'components/auth-provider.tsx', name: 'AuthProvider' },
  { path: 'components/auth-guard.tsx', name: 'AuthGuard' }
];

authComponents.forEach(component => {
  const compPath = path.join(process.cwd(), component.path);
  if (fs.existsSync(compPath)) {
    const content = fs.readFileSync(compPath, 'utf8');
    
    console.log(`üìÑ ${component.name}:`);
    
    // Verificar useAuth
    const hasUseAuth = /useAuth/.test(content);
    console.log(`   ${hasUseAuth ? '‚úÖ' : '‚ùå'} useAuth: ${hasUseAuth ? 'Usado' : 'No usado'}`);
    
    // Verificar loading handling
    const hasLoadingHandling = /loading.*loading|isLoading/.test(content);
    console.log(`   ${hasLoadingHandling ? '‚úÖ' : '‚ö†Ô∏è'} Loading handling: ${hasLoadingHandling ? 'Implementado' : 'Faltante'}`);
    
    // Verificar error handling
    const hasErrorHandling = /error.*error|authError/.test(content);
    console.log(`   ${hasErrorHandling ? '‚úÖ' : '‚ö†Ô∏è'} Error handling: ${hasErrorHandling ? 'Implementado' : 'Faltante'}`);
    
  } else {
    console.log(`‚ùå ${component.path} no encontrado`);
  }
});

// 5. Verificar layout principal
console.log('\nüîß 5. VERIFICANDO LAYOUT PRINCIPAL');
console.log('-----------------------------------');

const layoutPath = path.join(process.cwd(), 'app', 'layout.tsx');
if (fs.existsSync(layoutPath)) {
  const content = fs.readFileSync(layoutPath, 'utf8');
  
  console.log('üìÑ Root Layout:');
  
  // Verificar AuthProvider
  const hasAuthProvider = /AuthProvider/.test(content);
  console.log(`   ${hasAuthProvider ? '‚úÖ' : '‚ùå'} AuthProvider: ${hasAuthProvider ? 'Incluido' : 'FALTANTE'}`);
  
  // Verificar ThemeProvider
  const hasThemeProvider = /ThemeProvider/.test(content);
  console.log(`   ${hasThemeProvider ? '‚úÖ' : '‚ö†Ô∏è'} ThemeProvider: ${hasThemeProvider ? 'Incluido' : 'No incluido'}`);
  
  // Verificar metadata
  const hasMetadata = /export.*metadata/.test(content);
  console.log(`   ${hasMetadata ? '‚úÖ' : '‚ö†Ô∏è'} Metadata: ${hasMetadata ? 'Configurado' : 'No configurado'}`);
  
} else {
  console.log('‚ùå app/layout.tsx no encontrado');
}

// 6. Crear script de prueba de conexi√≥n
console.log('\nüîß 6. CREANDO SCRIPT DE PRUEBA DE CONEXI√ìN');
console.log('-------------------------------------------');

const testConnectionScript = `#!/usr/bin/env node

/**
 * üß™ Prueba de Conexi√≥n a Supabase
 * 
 * Este script prueba la conexi√≥n a Supabase y verifica que los datos se cargan correctamente.
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

async function testSupabaseConnection() {
  console.log('üß™ PROBANDO CONEXI√ìN A SUPABASE');
  console.log('===============================\n');

  // Verificar variables de entorno
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseKey) {
    console.log('‚ùå Variables de entorno faltantes');
    console.log('   NEXT_PUBLIC_SUPABASE_URL:', !!supabaseUrl);
    console.log('   NEXT_PUBLIC_SUPABASE_ANON_KEY:', !!supabaseKey);
    return;
  }

  console.log('‚úÖ Variables de entorno configuradas');

  try {
    // Crear cliente
    const supabase = createClient(supabaseUrl, supabaseKey);
    console.log('‚úÖ Cliente Supabase creado');

    // Probar conexi√≥n b√°sica
    console.log('\nüîç Probando conexi√≥n b√°sica...');
    const { data: testData, error: testError } = await supabase
      .from('profiles')
      .select('id')
      .limit(1);

    if (testError) {
      console.log('‚ùå Error de conexi√≥n:', testError.message);
      return;
    }

    console.log('‚úÖ Conexi√≥n b√°sica exitosa');

    // Probar carga de servicios
    console.log('\nüîç Probando carga de servicios...');
    const { data: services, error: servicesError } = await supabase
      .from('services')
      .select('id, title')
      .limit(5);

    if (servicesError) {
      console.log('‚ùå Error cargando servicios:', servicesError.message);
    } else {
      console.log('‚úÖ Servicios cargados:', services?.length || 0, 'servicios');
    }

    // Probar carga de categor√≠as
    console.log('\nüîç Probando carga de categor√≠as...');
    const { data: categories, error: categoriesError } = await supabase
      .from('categories')
      .select('id, name')
      .limit(5);

    if (categoriesError) {
      console.log('‚ùå Error cargando categor√≠as:', categoriesError.message);
    } else {
      console.log('‚úÖ Categor√≠as cargadas:', categories?.length || 0, 'categor√≠as');
    }

    // Probar autenticaci√≥n an√≥nima
    console.log('\nüîç Probando autenticaci√≥n an√≥nima...');
    const { data: { session }, error: authError } = await supabase.auth.getSession();

    if (authError) {
      console.log('‚ùå Error de autenticaci√≥n:', authError.message);
    } else {
      console.log('‚úÖ Autenticaci√≥n funcionando');
      console.log('   Sesi√≥n activa:', !!session);
    }

  } catch (error) {
    console.log('‚ùå Error general:', error.message);
  }
}

testSupabaseConnection();
`;

fs.writeFileSync('scripts/test-supabase-connection.js', testConnectionScript);
console.log('‚úÖ Script de prueba de conexi√≥n creado: scripts/test-supabase-connection.js');

// 7. Crear script de diagn√≥stico de hooks
console.log('\nüîß 7. CREANDO SCRIPT DE DIAGN√ìSTICO DE HOOKS');
console.log('---------------------------------------------');

const hooksDiagnosticScript = `#!/usr/bin/env node

/**
 * üîç Diagn√≥stico de Hooks - Tenerife Paradise Tours
 * 
 * Este script diagnostica problemas espec√≠ficos en los hooks de la aplicaci√≥n.
 */

const fs = require('fs');
const path = require('path');

function analyzeHook(hookPath, hookName) {
  console.log(\`\nüìÑ Analizando \${hookName}...\`);
  
  if (!fs.existsSync(hookPath)) {
    console.log(\`‚ùå \${hookPath} no encontrado\`);
    return;
  }

  const content = fs.readFileSync(hookPath, 'utf8');
  
  // Verificar problemas comunes
  const issues = [];
  
  // 1. Verificar dependencias de useEffect
  const useEffectMatches = content.match(/useEffect\([^)]*\)/g);
  if (useEffectMatches) {
    useEffectMatches.forEach((match, index) => {
      if (match.includes('[]') && !match.includes('// eslint-disable-next-line')) {
        issues.push(\`useEffect \${index + 1}: Dependencias vac√≠as sin comentario\`);
      }
    });
  }
  
  // 2. Verificar m√∫ltiples setState en useEffect
  const setStateMatches = content.match(/set[A-Z][a-zA-Z]*\(/g);
  if (setStateMatches && setStateMatches.length > 3) {
    issues.push(\`M√∫ltiples setState (${setStateMatches.length} encontrados)\`);
  }
  
  // 3. Verificar falta de cleanup en useEffect
  const useEffectWithCleanup = content.match(/useEffect\([^)]*\{[^}]*return[^}]*\}/g);
  if (useEffectMatches && !useEffectWithCleanup) {
    issues.push('useEffect sin cleanup function');
  }
  
  // 4. Verificar async en useEffect
  const asyncUseEffect = content.match(/useEffect\(async/g);
  if (asyncUseEffect) {
    issues.push('useEffect con async (puede causar problemas)');
  }
  
  if (issues.length === 0) {
    console.log('‚úÖ Sin problemas detectados');
  } else {
    console.log('‚ö†Ô∏è Problemas detectados:');
    issues.forEach(issue => console.log(\`   ‚Ä¢ \${issue}\`));
  }
}

console.log('üîç DIAGN√ìSTICO DE HOOKS');
console.log('=======================\n');

const hooks = [
  { path: 'hooks/use-auth.ts', name: 'useAuth' },
  { path: 'hooks/use-services.ts', name: 'useServices' },
  { path: 'hooks/use-reservations.ts', name: 'useReservations' }
];

hooks.forEach(hook => {
  analyzeHook(hook.path, hook.name);
});

console.log('\n‚úÖ Diagn√≥stico de hooks completado');
`;

fs.writeFileSync('scripts/diagnose-hooks.js', hooksDiagnosticScript);
console.log('‚úÖ Script de diagn√≥stico de hooks creado: scripts/diagnose-hooks.js');

// 8. Recomendaciones
console.log('\nüí° 8. RECOMENDACIONES PARA SOLUCIONAR EL PROBLEMA');
console.log('================================================');

const recommendations = [
  {
    category: 'üö® Problemas Cr√≠ticos',
    items: [
      'Verificar que las variables de entorno est√©n configuradas correctamente',
      'Asegurar que NEXT_PUBLIC_SUPABASE_URL y NEXT_PUBLIC_SUPABASE_ANON_KEY est√©n en .env.local',
      'Verificar que el proyecto de Supabase est√© activo y accesible',
      'Comprobar que las tablas existan en Supabase'
    ]
  },
  {
    category: 'üîß Problemas de C√≥digo',
    items: [
      'Verificar que AuthProvider est√© incluido en el layout principal',
      'Asegurar que los hooks tengan manejo de errores apropiado',
      'Verificar que no haya m√∫ltiples instancias de Supabase',
      'Comprobar que los useEffect tengan dependencias correctas'
    ]
  },
  {
    category: 'üì± Problemas de Navegaci√≥n',
    items: [
      'Verificar que el router est√© configurado correctamente',
      'Asegurar que las p√°ginas tengan loading states apropiados',
      'Verificar que no haya bucles infinitos en useEffect',
      'Comprobar que los componentes se monten correctamente'
    ]
  }
];

recommendations.forEach(rec => {
  console.log(`\n${rec.category}:`);
  rec.items.forEach(item => {
    console.log(`  ‚Ä¢ ${item}`);
  });
});

console.log('\nüéØ PR√ìXIMOS PASOS:');
console.log('==================');
console.log('1. Ejecutar: node scripts/test-supabase-connection.js');
console.log('2. Ejecutar: node scripts/diagnose-hooks.js');
console.log('3. Verificar variables de entorno en .env.local');
console.log('4. Probar conexi√≥n manual a Supabase');
console.log('5. Revisar logs del navegador para errores espec√≠ficos');

console.log('\n‚úÖ Diagn√≥stico de carga de datos completado'); 